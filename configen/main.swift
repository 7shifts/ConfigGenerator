//
//  main.swift
//  configen
//
//  Created by Sam Dods on 29/09/2015.
//  Copyright Â© 2015 The App Business. All rights reserved.
//

import Foundation

extension String {
  var trimmed: String {
    return (self as NSString).stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())
  }
}

guard let parser = OptionsParser(arguments: Process.arguments) else {
  fatalError("usage: configen <inputPlistFilePath> <inputHintsFilePath> <outputClassName> <outputClassDirectory> [objc]")
}

let fileGenerator = FileGenerator()

if parser.isObjC {
  let template = ObjectiveCTemplate(optionsParser: parser)
  fileGenerator.generateHeaderFile(withTemplate: template, options: parser)
}



//let outputClassImplementationName = "\(parser.outputClassDirectory)/\(parser.outputClassName).m"
//
//func methodDeclarationForVariableName(variableName: String, type: String) -> String {
//  var line = ""
//  
//  switch (type) {
//  case ("Double"), ("Int"):
//    line += "+ (NSNumber *)\(variableName)"
//    
//  case ("String"):
//    line += "+ (NSString *)\(variableName)"
//    
//  case ("Bool"):
//    line += "+ (BOOL)\(variableName)"
//    
//  case ("NSURL"):
//    line += "+ (NSURL *)\(variableName)"
//    
//  default:
//    fatalError("Unknown type: \(type)")
//  }
//  
//  return line
//}
//
//func methodImplementationForVariableName(variableName: String, type: String) -> String {
//  
//  guard let value = plistDictionary[variableName] else {
//    fatalError("No configuration setting for variable name: \(variableName)")
//  }
//  
//  let token = "$$"
//  var line = methodDeclarationForVariableName(variableName, type: type) + "\n{\n  return \(token);\n}"
//  
//  func replaceTokenWith(string: String) {
//    line = line.stringByReplacingOccurrencesOfString(token, withString: string)
//  }
//  
//  switch (type) {
//  case ("Double"), ("Int"):
//    replaceTokenWith("@\(value)")
//    
//  case ("String"):
//    replaceTokenWith("@\"\(value)\"")
//    
//  case ("Bool"):
//    let boolString = value as! Bool ? "YES" : "NO"
//    replaceTokenWith("\(boolString)")
//    
//  case ("NSURL"):
//    let url = NSURL(string: value as! String)!
//    guard url.host != nil else {
//      fatalError("Found URL without host: \(url) for setting: \(variableName)")
//    }
//    replaceTokenWith("[NSURL URLWithString:@\"\(value)\"]")
//    
//  default:
//    fatalError("Unknown type: \(type)")
//  }
//  
//  return line
//}
//
//var headerOutputString = ""
//var implementationOutputString = ""
//
//for (variableName, type) in hintsDictionary {
//  var headerLine = methodDeclarationForVariableName(variableName, type: type)
//  headerOutputString.appendContentsOf("\n" + headerLine + ";" + "\n")
//  
//  var implementationLine = methodImplementationForVariableName(variableName, type: type)
//  implementationOutputString.appendContentsOf("\n" + implementationLine + "\n")
//}
//
//
//let headerComment = "// auto-generated by \(parser.appName)\n\n"
//let foundationImport = "#import <Foundation/Foundation.h>\n\n"
//headerOutputString = "\(headerComment)\(foundationImport)@interface \(parser.outputClassName) : NSObject \n\(headerOutputString)\n@end\n"
//let headerImport = "#import \"\(parser.outputClassName).h\""
//implementationOutputString = "\(headerComment)\(headerImport)\n\n@implementation \(parser.outputClassName) \n\(implementationOutputString)\n@end\n"
//
//do {
//  try headerOutputString.writeToFile(outputClassHeaderName, atomically: true, encoding: NSUTF8StringEncoding)
//}
//catch {
//  fatalError("Failed to write to file at path \(outputClassHeaderName)")
//}
//
//do {
//  try implementationOutputString.writeToFile(outputClassImplementationName, atomically: true, encoding: NSUTF8StringEncoding)
//}
//catch {
//  fatalError("Failed to write to file at path \(outputClassImplementationName)")
//}

